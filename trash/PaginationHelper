import java.util.List;


public class PaginationHelper<I> {
    /**
    * The constructor takes in an array of items and a integer indicating how many
    * items fit within a single page
    */
    List<I> collection;
    int items;
    int count;
    int pages;
    public PaginationHelper(List<I> collection, int itemsPerPage) {
        this.collection = collection;
        this.items = itemsPerPage;
        count = collection.size(); 
        pages = count / items + 1;
    }

    /**
     * returns the number of items within the entire collection
     */
    public int itemCount() {
        return count;
    }

    /**
     * returns the number of pages
     */
    public int pageCount() { 
        return pages;
    }

    /**
     * returns the number of items on the current page. page_index is zero based.
     * this method should return -1 for pageIndex values that are out of range
     */
    public int pageItemCount(int pageIndex) {
        if (pages == pageIndex + 1) return count % items;
        else if (pages > pageIndex + 1 ) return items;
        else return -1;
    }

    /**
     * determines what page an item is on. Zero based indexes
     * this method should return -1 for itemIndex values that are out of range
     */
    public int pageIndex(int itemIndex) {
        if(itemIndex == 0 && items == 0) return -1; 
        if(itemIndex > count || itemIndex < 0) return -1;
        else{
            return (itemIndex + 1) / items; 
        }
    }
}
